using CsvHelper;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using System.Globalization;
using T4.PR1.Data;
using T4.PR1.Model;

namespace T4.PR1.Pages
{
    /// <summary>
    /// Page model for adding a new energy simulation.
    /// </summary>
    public class AddSimulationModel : PageModel
    {
        private readonly EcoEnergyContext _context;

        /// <summary>
        /// Constructor for the AddSimulationModel class.
        /// </summary>
        /// <param name="context">Data context.</param>
        public AddSimulationModel(EcoEnergyContext context)
        {
            _context = context;
        }

        /// <summary>
        /// Property bound to receive the new simulation from the form.
        /// </summary>
        [BindProperty]
        public EnergySimulation NewSimulation { get; set; }

        /// <summary>
        /// Property to store the error message to display in the view.
        /// </summary>
        public string ErrorMessage;

        /// <summary>
        /// Handler for the GET request.
        /// </summary>
        /// <returns>IActionResult to display the page.</returns>
        public IActionResult OnGet()
        {
            return Page();
        }

        /// <summary>
        /// Handler for the POST request, which saves the new simulation to the database.
        /// </summary>
        /// <returns>IActionResult to redirect to the display page or show an error.</returns>
        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid)
            {
                ErrorMessage = "Si us plau, omple tots els camps correctament.";
                return Page();
            }

            try
            {
                // Calculate energy generated before inserting into the database
                NewSimulation.EnergyGenerated = CalculateEnergy(NewSimulation);

                _context.Simulations.Add(NewSimulation);
                await _context.SaveChangesAsync();

                return RedirectToPage("ViewSimulations");
            }
            catch (Exception ex)
            {
                // Add error to ModelState
                ErrorMessage = "Error en desar la simulació.";
                return Page();
            }
        }

        /// <summary>
        /// Calculates the energy generated by the simulation based on the system type.
        /// </summary>
        /// <param name="simulation">The energy simulation.</param>
        /// <returns>The energy generated.</returns>
        /// <exception cref="ArgumentException">Thrown if the system type is invalid.</exception>
        private decimal CalculateEnergy(EnergySimulation simulation)
        {
            AEnergySystem system = simulation.SystemType switch
            {
                "Solar" => new SolarSystem(simulation.Ratio),
                "Wind" => new WindSystem(simulation.Ratio),
                "Hydraulic" => new HydraulicSystem(simulation.Ratio),
                _ => throw new ArgumentException("Tipus de sistema invàlid.")
            };

            return system.CalculateEnergy(simulation.InputValue);
        }
    }
}
